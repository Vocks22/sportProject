name: US1.6 - Semaines Lundi-Dimanche CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/us1.6-* ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'scripts/**'
      - 'requirements.txt'
      - 'package.json'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'scripts/**'
      - 'requirements.txt'
      - 'package.json'

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '13'

jobs:
  # ========================================
  # QUALITY GATES - Code Quality & Security
  # ========================================
  quality-gates:
    name: 🔍 Quality Gates & Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort safety bandit

      - name: Install Node dependencies
        run: npm ci

      - name: Python Code Quality (Black, isort, flake8)
        run: |
          black --check src/backend/
          isort --check-only src/backend/
          flake8 src/backend/ --max-line-length=100 --extend-ignore=E203,W503

      - name: JavaScript/React Code Quality (ESLint)
        run: npm run lint

      - name: Python Security Scan (Bandit + Safety)
        run: |
          bandit -r src/backend/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Upload Quality Reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # ========================================
  # BACKEND TESTS - US1.6 Date Utils & APIs
  # ========================================
  backend-tests:
    name: 🐍 Backend Tests - US1.6 Date Logic
    runs-on: ubuntu-latest
    needs: quality-gates

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_diettracker
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_diettracker
      FLASK_ENV: testing

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Initialize test database
        run: |
          cd src/backend
          python -c "from database.config import create_tables; create_tables()"
          python ../../scripts/init_data.py --test-data

      - name: Run US1.6 Unit Tests - Date Utils
        run: |
          pytest tests/backend/test_date_utils_us16.py -v \
            --cov=src/backend/utils/date_utils \
            --cov-report=xml:coverage-date-utils.xml \
            --cov-report=html:htmlcov/date-utils \
            --junitxml=junit-date-utils.xml

      - name: Run US1.6 Integration Tests - API
        run: |
          pytest tests/backend/test_meal_plans_api_us16.py -v \
            --cov=src/backend/routes \
            --cov-report=xml:coverage-api.xml \
            --cov-report=html:htmlcov/api \
            --junitxml=junit-api.xml

      - name: Run US1.6 Migration Tests
        run: |
          pytest tests/backend/test_migration_us16.py -v \
            --junitxml=junit-migration.xml

      - name: Performance Tests - US1.6 Date Operations
        run: |
          pytest tests/backend/test_performance_us16.py -v -s \
            --benchmark-only \
            --benchmark-json=benchmark-results.json

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            coverage-*.xml
            htmlcov/
            junit-*.xml
            benchmark-results.json
          retention-days: 30

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage-date-utils.xml,coverage-api.xml
          flags: backend,us16
          name: backend-coverage

  # ========================================
  # FRONTEND TESTS - React Components & Hooks
  # ========================================
  frontend-tests:
    name: ⚛️ Frontend Tests - Calendar Components
    runs-on: ubuntu-latest
    needs: quality-gates

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run US1.6 Unit Tests - Calendar Components
        run: |
          npm test -- \
            --testPathPattern="test_calendar_components_us16" \
            --coverage \
            --coverageDirectory=coverage-frontend \
            --coverageReporters=text,xml,html \
            --watchAll=false

      - name: Run useISOWeek Hook Tests
        run: |
          npm test -- \
            --testPathPattern="useISOWeek" \
            --coverage \
            --coverageDirectory=coverage-hooks \
            --coverageReporters=text,xml,html \
            --watchAll=false

      - name: Build Frontend (Production)
        run: npm run build

      - name: Upload Frontend Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            coverage-frontend/
            coverage-hooks/
          retention-days: 30

      - name: Upload Frontend Coverage
        uses: codecov/codecov-action@v3
        with:
          directory: coverage-frontend
          flags: frontend,us16
          name: frontend-coverage

  # ========================================
  # E2E TESTS - Complete User Workflows
  # ========================================
  e2e-tests:
    name: 🎭 E2E Tests - Calendar Workflows
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: e2e_diettracker
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/e2e_diettracker
      FLASK_ENV: testing

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm ci

      - name: Setup E2E test environment
        run: |
          cd src/backend
          python -c "from database.config import create_tables; create_tables()"
          python ../../scripts/init_data.py --e2e-data

      - name: Build Frontend for E2E
        run: npm run build

      - name: Start Backend Server (Background)
        run: |
          cd src/backend
          python main.py &
          sleep 10
        env:
          FLASK_ENV: testing

      - name: Run US1.6 E2E Tests - Calendar Workflows
        run: |
          pytest tests/e2e/test_calendar_workflows_us16.py -v \
            --html=e2e-report.html \
            --self-contained-html

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            e2e-report.html
            screenshots/
          retention-days: 30

  # ========================================
  # DATA MIGRATION VALIDATION
  # ========================================
  migration-validation:
    name: 📊 Data Migration Validation
    runs-on: ubuntu-latest
    needs: backend-tests
    if: github.ref == 'refs/heads/main' || contains(github.event.pull_request.title, '[MIGRATION]')

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: migration_password
          POSTGRES_USER: migration_user
          POSTGRES_DB: migration_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://migration_user:migration_password@localhost:5432/migration_test

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create Legacy Data for Migration Test
        run: |
          cd scripts
          python init_data.py --legacy-format
          python validate_us16_data_integrity.py --pre-migration

      - name: Run US1.6 Migration Script
        run: |
          cd scripts
          python migrate_to_iso8601_weeks.py --dry-run
          python migrate_to_iso8601_weeks.py --execute

      - name: Validate Migration Results
        run: |
          cd scripts
          python validate_us16_data_integrity.py --post-migration
          python validate_us16_implementation.py --full-validation

      - name: Generate Migration Report
        run: |
          cd scripts
          python backup_restore_us16.py --generate-report > migration-report.txt

      - name: Upload Migration Results
        uses: actions/upload-artifact@v4
        with:
          name: migration-validation-results
          path: |
            scripts/migration-report.txt
            scripts/migration-backup-*.sql
          retention-days: 90

  # ========================================
  # PERFORMANCE BENCHMARKS
  # ========================================
  performance-tests:
    name: ⚡ Performance Tests & Benchmarks
    runs-on: ubuntu-latest
    needs: backend-tests

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_PASSWORD: perf_password
          POSTGRES_USER: perf_user
          POSTGRES_DB: perf_diettracker
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://perf_user:perf_password@localhost:5432/perf_diettracker

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark locust

      - name: Setup Performance Test Data
        run: |
          cd scripts
          python init_data.py --large-dataset

      - name: Run Performance Benchmarks
        run: |
          pytest tests/backend/test_performance_us16.py \
            --benchmark-only \
            --benchmark-json=performance-results.json \
            --benchmark-compare-fail=min:5% \
            --benchmark-compare-fail=mean:10%

      - name: Load Testing - API Endpoints
        run: |
          cd src/backend
          python main.py &
          sleep 10
          
          # Run load tests
          locust -f ../../tests/load/test_us16_load.py \
            --host=http://localhost:5000 \
            --users=20 \
            --spawn-rate=2 \
            --run-time=60s \
            --html=load-test-report.html \
            --headless

      - name: Upload Performance Results
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            performance-results.json
            load-test-report.html
          retention-days: 30

  # ========================================
  # DEPLOYMENT TO STAGING
  # ========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [e2e-tests, migration-validation, performance-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://diettracker-staging.herokuapp.com

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Frontend
        run: |
          npm ci
          npm run build

      - name: Deploy to Staging (Heroku)
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "diettracker-staging"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}

      - name: Run Post-Deployment Tests
        run: |
          sleep 30
          curl -f https://diettracker-staging.herokuapp.com/health || exit 1
          pytest tests/integration/test_staging_deployment.py -v

      - name: Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "US1.6 deployed to staging successfully! 🎉"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ========================================
  # DEPLOYMENT TO PRODUCTION
  # ========================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://diettracker-app.herokuapp.com

    steps:
      - uses: actions/checkout@v4

      - name: Create Production Backup
        run: |
          curl -X POST "${{ secrets.PROD_BACKUP_WEBHOOK }}" \
            -H "Authorization: Bearer ${{ secrets.PROD_BACKUP_TOKEN }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build Frontend
        run: |
          npm ci
          npm run build

      - name: Deploy to Production (Blue-Green)
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "diettracker-app"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}

      - name: Run Production Smoke Tests
        run: |
          sleep 60
          pytest tests/smoke/test_production_us16.py -v --maxfail=1

      - name: Enable Production Traffic
        run: |
          # Switch traffic from blue to green deployment
          curl -X POST "${{ secrets.PROD_TRAFFIC_SWITCH_WEBHOOK }}" \
            -H "Authorization: Bearer ${{ secrets.PROD_DEPLOY_TOKEN }}"

      - name: Monitor Post-Deployment Health
        run: |
          sleep 120
          python scripts/monitor_production_health.py --duration=300

      - name: Notify Production Deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "🚀 US1.6 Calendar Features deployed to PRODUCTION! Monitoring for 5 minutes..."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ========================================
  # ROLLBACK CAPABILITY
  # ========================================
  rollback-production:
    name: ⏪ Production Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production

    steps:
      - uses: actions/checkout@v4

      - name: Execute Emergency Rollback
        run: |
          # Restore database backup
          curl -X POST "${{ secrets.PROD_ROLLBACK_WEBHOOK }}" \
            -H "Authorization: Bearer ${{ secrets.PROD_ROLLBACK_TOKEN }}"

      - name: Revert to Previous Deployment
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "diettracker-app"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          rollbackto: ${{ github.event.before }}

      - name: Verify Rollback Success
        run: |
          sleep 30
          pytest tests/smoke/test_rollback_verification.py -v

      - name: Alert Team - Rollback Executed
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "🚨 PRODUCTION ROLLBACK EXECUTED for US1.6 deployment. Please investigate immediately!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}