{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(find:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(ls:*)",
      "Bash(python:*)",
      "Bash(pip3:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(alembic upgrade:*)",
      "Bash(rm:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(sqlite3:*)",
      "Bash(npm install)",
      "Bash(npm run dev:*)",
      "Bash(npx vite:*)",
      "Bash(cat:*)",
      "Bash(git push:*)",
      "Bash(PYTHONPATH=src/backend python3 -c \"import sys; print(sys.path)\")",
      "Bash(PYTHONPATH=src/backend python -c \"from schemas.meal_plan import meal_plan_schema; print(''MealPlan schema imported successfully'')\")",
      "Bash(PYTHONPATH=src/backend python test_meal_plan_api.py)",
      "Bash(PYTHONPATH=src/backend python test_shopping_list.py)",
      "Bash(./venv/bin/pytest tests/backend/test_meal_plans.py::TestMealPlansAPI::test_create_meal_plan_success -v)",
      "Bash(./venv/bin/pytest tests/backend/test_meal_plans.py -v)",
      "Bash(./venv/bin/pytest tests/backend/ -v)",
      "Bash(PYTHONPATH=/mnt/d/vibeCode/GitRepo/sportProject/src/backend python3 -c \"\n# Start Flask app temporarily for testing\nimport sys\nimport os\nsys.path.insert(0, ''src/backend'')\n\nfrom main import create_app\nfrom database import db\nfrom models.recipe import Recipe\nimport json\nimport threading\nimport time\nimport requests\n\n# Create and configure app\napp = create_app()\n\ndef start_server():\n    app.run(host=''127.0.0.1'', port=5001, debug=False, use_reloader=False)\n\n# Start server in background\nserver_thread = threading.Thread(target=start_server, daemon=True)\nserver_thread.start()\ntime.sleep(2)  # Wait for server to start\n\nprint(''üß™ Testing US1.4 API Endpoints'')\nprint(''='' * 40)\n\n# Test 1: Create a recipe with chef mode\nprint(''\\n1Ô∏è‚É£ Testing recipe creation with chef mode...'')\ntest_recipe_data = {\n    ''name'': ''QA Test Omelette Chef'',\n    ''category'': ''breakfast'',\n    ''meal_type'': ''repas1'', \n    ''ingredients'': [\n        {''ingredient_id'': 1, ''name'': ''Eggs'', ''quantity'': 3, ''unit'': ''pieces''}\n    ],\n    ''instructions'': [\n        {''step'': 1, ''description'': ''Beat the eggs''}\n    ],\n    ''prep_time'': 5,\n    ''cook_time'': 10,\n    ''servings'': 1,\n    ''has_chef_mode'': True,\n    ''difficulty_level'': ''beginner'',\n    ''chef_instructions'': [\n        ''Ensure eggs are at room temperature'',\n        ''Use a non-stick pan that is properly heated''\n    ],\n    ''cooking_steps'': [\n        {\n            ''step'': 1,\n            ''title'': ''Egg Preparation'', \n            ''description'': ''Separate whites from yolks and beat lightly'',\n            ''duration_minutes'': 2,\n            ''temperature'': ''Room temperature'',\n            ''technique'': ''Light beating''\n        },\n        {\n            ''step'': 2,\n            ''title'': ''Cooking'',\n            ''description'': ''Pour into hot pan and cook on medium heat'',\n            ''duration_minutes'': 8,\n            ''temperature'': ''Medium heat'',\n            ''technique'': ''Pan cooking''\n        }\n    ],\n    ''chef_tips'': [\n        {\n            ''type'': ''tip'',\n            ''title'': ''Perfect temperature'',\n            ''description'': ''Pan should be hot but not smoking'',\n            ''importance'': ''high''\n        }\n    ],\n    ''visual_cues'': [\n        {\n            ''step_number'': 2,\n            ''description'': ''Edges start to set'',\n            ''what_to_look_for'': ''White border forming around omelette''\n        }\n    ],\n    ''timing_details'': {\n        ''total_time'': 10,\n        ''active_time'': 8,\n        ''passive_time'': 2\n    },\n    ''media_references'': [\n        {\n            ''type'': ''photo'',\n            ''step_number'': 2,\n            ''description'': ''Perfectly cooked omelette appearance''\n        }\n    ]\n}\n\ntry:\n    response = requests.post(''http://127.0.0.1:5001/api/recipes'', json=test_recipe_data)\n    if response.status_code == 201:\n        recipe = response.json()\n        recipe_id = recipe[''id'']\n        print(''‚úÖ Recipe created successfully!'')\n        print(f''   ID: {recipe_id}'')\n        print(f''   Name: {recipe[\"\"name\"\"]}'')\n        print(f''   Chef Mode: {recipe[\"\"has_chef_mode\"\"]}'')\n        print(f''   Difficulty: {recipe[\"\"difficulty_level\"\"]}'')\n        \n        # Test 2: Retrieve cooking guide\n        print(''\\n2Ô∏è‚É£ Testing cooking guide endpoint...'')\n        guide_response = requests.get(f''http://127.0.0.1:5001/api/recipes/{recipe_id}/cooking-guide'')\n        \n        if guide_response.status_code == 200:\n            guide = guide_response.json()\n            print(''‚úÖ Cooking guide retrieved successfully!'')\n            print(f''   Recipe: {guide[\"\"recipe_name\"\"]}'')\n            print(f''   Difficulty: {guide[\"\"difficulty_level\"\"]}'')\n            print(f''   Cooking steps: {len(guide[\"\"cooking_steps\"\"])}'')\n            print(f''   Chef tips: {len(guide[\"\"chef_tips\"\"])}'')\n            print(f''   Visual cues: {len(guide[\"\"visual_cues\"\"])}'')\n            \n            # Validate structure\n            required_fields = [\n                ''recipe_id'', ''recipe_name'', ''difficulty_level'',\n                ''prep_time'', ''cook_time'', ''servings'', ''ingredients'',\n                ''chef_instructions'', ''cooking_steps'', ''chef_tips'', \n                ''visual_cues'', ''timing_details'', ''media_references''\n            ]\n            missing_fields = [field for field in required_fields if field not in guide]\n            if not missing_fields:\n                print(''‚úÖ All required fields present in cooking guide'')\n            else:\n                print(f''‚ùå Missing fields: {missing_fields}'')\n        else:\n            print(f''‚ùå Failed to retrieve cooking guide: {guide_response.status_code}'')\n            print(f''   Error: {guide_response.text}'')\n        \n        # Test 3: Filter recipes by chef mode\n        print(''\\n3Ô∏è‚É£ Testing recipe filtering...'')\n        filter_response = requests.get(''http://127.0.0.1:5001/api/recipes?has_chef_mode=true'')\n        \n        if filter_response.status_code == 200:\n            data = filter_response.json()\n            chef_recipes = data[''recipes'']\n            print(f''‚úÖ Found {len(chef_recipes)} recipes with chef mode'')\n            \n            # Verify all returned recipes have chef mode enabled\n            all_chef_enabled = all(r.get(''has_chef_mode'', False) for r in chef_recipes)\n            if all_chef_enabled:\n                print(''‚úÖ All filtered recipes have chef mode enabled'')\n            else:\n                print(''‚ùå Some filtered recipes do not have chef mode enabled'')\n        else:\n            print(f''‚ùå Failed to filter recipes: {filter_response.status_code}'')\n        \n        # Test 4: Test error handling - non-existent recipe\n        print(''\\n4Ô∏è‚É£ Testing error handling...'')\n        error_response = requests.get(''http://127.0.0.1:5001/api/recipes/99999/cooking-guide'')\n        \n        if error_response.status_code == 404:\n            print(''‚úÖ Correctly returns 404 for non-existent recipe'')\n        else:\n            print(f''‚ùå Expected 404, got {error_response.status_code}'')\n            \n    else:\n        print(f''‚ùå Failed to create recipe: {response.status_code}'')\n        print(f''   Error: {response.text}'')\n\nexcept Exception as e:\n    print(f''‚ùå Test failed with exception: {e}'')\n\nprint(''\\nüéâ API endpoint testing completed'')\n\")",
      "Bash(wget:*)",
      "Bash(cp:*)",
      "Bash(npm install:*)",
      "Bash(chmod:*)",
      "Bash(sed:*)",
      "Bash(grep:*)",
      "Bash(for file in *.jsx)",
      "Bash(do if ! grep -q \"^import React\" \"$file\")",
      "Bash(then sed -i \"1s/^/import React from ''react''\\n/\" \"$file\")",
      "Bash(fi)",
      "Bash(done)",
      "Bash(for file in Header.jsx MobileHeader.jsx Sidebar.jsx Dashboard.jsx MobileDashboard.jsx)",
      "Bash(do sed -i \"1s/^/import React from ''react''\\n/\" \"$file\")",
      "Bash(do sed -i '/^import React from ''''react''''/N; s/import React from ''''react''''\\nimport React from ''''react''''/import React from ''''react''''/g' \"$file\")",
      "Bash(npx tailwindcss:*)",
      "Bash(PYTHONPATH:*)",
      "WebFetch(domain:diettracker-backend.onrender.com)",
      "Bash(node:*)",
      "Bash(npm run build:*)",
      "Bash(venv/bin/pip install:*)",
      "Bash(./venv/bin/pip install:*)",
      "Bash(./venv/bin/python:*)",
      "Bash(kill:*)"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  }
}