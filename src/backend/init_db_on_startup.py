#!/usr/bin/env python3
"""
Script d'initialisation automatique de la base de donn√©es au d√©marrage.
Ce script s'ex√©cute rapidement et v√©rifie/initialise les donn√©es de base.
"""

import os
import sys
from datetime import datetime
from pathlib import Path

# Configuration du path
sys.path.insert(0, str(Path(__file__).resolve().parent))

def init_database():
    """Initialise la base de donn√©es avec les donn√©es de base."""
    from database import db
    from main import create_app
    from models.diet_program import DietProgram, DietMeal
    from models.food import Food
    
    app = create_app()
    
    with app.app_context():
        # Cr√©er les tables si n√©cessaire
        db.create_all()
        print("‚úÖ Tables v√©rifi√©es")
        
        # V√©rifier si le programme existe d√©j√†
        existing_program = DietProgram.query.filter_by(user_id=1, is_active=True).first()
        
        if not existing_program:
            print("üìù Cr√©ation du programme di√©t√©tique...")
            
            # Cr√©er le programme principal
            program = DietProgram(
                user_id=1,
                name="Programme Prise de Masse",
                description="Programme di√©t√©tique structur√© en 5 repas quotidiens",
                start_date=datetime.now().date(),
                is_active=True,
                daily_calories_target=3000,
                daily_protein_target=150,
                daily_carbs_target=400,
                daily_fat_target=100
            )
            db.session.add(program)
            db.session.commit()
            
            # Ajouter les 5 repas
            meals_config = [
                ("Repas 1 - Petit-d√©jeuner", "07:00", 1),
                ("Repas 2 - Collation matin", "10:00", 2),
                ("Repas 3 - D√©jeuner", "12:30", 3),
                ("Repas 4 - Collation apr√®s-midi", "16:00", 4),
                ("Repas 5 - D√Æner", "19:30", 5)
            ]
            
            for name, time, order in meals_config:
                meal = DietMeal(
                    program_id=program.id,
                    name=name,
                    meal_time=time,
                    meal_order=order
                )
                db.session.add(meal)
            
            db.session.commit()
            print(f"‚úÖ Programme '{program.name}' cr√©√© avec {len(meals_config)} repas")
        else:
            print(f"‚úÖ Programme existant: {existing_program.name}")
        
        # V√©rifier si des aliments de base existent
        food_count = Food.query.count()
        if food_count == 0:
            print("üìù Ajout d'aliments de base...")
            
            # Ajouter quelques aliments de base
            basic_foods = [
                ("Riz blanc cuit", 130, 2.7, 28.2, 0.3, "100g"),
                ("Poulet grill√©", 165, 31.0, 0.0, 3.6, "100g"),
                ("Brocoli cuit", 35, 2.8, 7.2, 0.4, "100g"),
                ("Avocat", 160, 2.0, 8.5, 14.7, "100g"),
                ("≈íufs entiers", 155, 13.0, 1.1, 11.0, "100g"),
                ("Flocons d'avoine", 389, 16.9, 66.3, 6.9, "100g"),
                ("Banane", 89, 1.1, 22.8, 0.3, "100g"),
                ("Amandes", 579, 21.2, 21.6, 49.9, "100g")
            ]
            
            for name, cal, prot, carbs, fat, unit in basic_foods:
                food = Food(
                    name=name,
                    calories=cal,
                    protein=prot,
                    carbs=carbs,
                    fat=fat,
                    unit=unit,
                    category="base"
                )
                db.session.add(food)
            
            db.session.commit()
            print(f"‚úÖ {len(basic_foods)} aliments de base ajout√©s")
        else:
            print(f"‚úÖ {food_count} aliments d√©j√† en base")
        
        print("\nüéâ Base de donn√©es initialis√©e avec succ√®s!")
        return True

if __name__ == "__main__":
    try:
        init_database()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        sys.exit(1)