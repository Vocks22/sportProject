#!/usr/bin/env python3
"""
Script de v√©rification de l'impl√©mentation US1.5
V√©rifie que tous les fichiers et composants sont en place
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """V√©rifie qu'un fichier existe"""
    if os.path.exists(file_path):
        print(f"   ‚úÖ {description}")
        return True
    else:
        print(f"   ‚ùå {description} - MANQUANT")
        return False

def check_directory_exists(dir_path, description):
    """V√©rifie qu'un r√©pertoire existe"""
    if os.path.exists(dir_path) and os.path.isdir(dir_path):
        print(f"   ‚úÖ {description}")
        return True
    else:
        print(f"   ‚ùå {description} - MANQUANT")
        return False

def check_file_contains(file_path, search_terms, description):
    """V√©rifie qu'un fichier contient certains termes"""
    if not os.path.exists(file_path):
        print(f"   ‚ùå {description} - FICHIER MANQUANT")
        return False
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        missing_terms = []
        for term in search_terms:
            if term not in content:
                missing_terms.append(term)
        
        if not missing_terms:
            print(f"   ‚úÖ {description}")
            return True
        else:
            print(f"   ‚ö†Ô∏è {description} - Termes manquants: {', '.join(missing_terms)}")
            return False
    
    except Exception as e:
        print(f"   ‚ùå {description} - Erreur de lecture: {e}")
        return False

def main():
    print("üîç V√©rification de l'impl√©mentation US1.5 - Liste de Courses Interactive")
    print("=" * 80)
    
    base_path = Path(__file__).parent.parent
    
    all_checks_passed = True
    
    # 1. V√©rification des mod√®les backend
    print("\nüì¶ 1. MOD√àLES BACKEND")
    checks = [
        (base_path / "src/backend/models/meal_plan.py", "Mod√®le MealPlan et ShoppingList"),
        (base_path / "src/backend/models/shopping_history.py", "Mod√®les ShoppingListHistory et StoreCategory"),
        (base_path / "src/backend/models/ingredient.py", "Mod√®le Ingredient"),
    ]
    
    for file_path, description in checks:
        if not check_file_exists(file_path, description):
            all_checks_passed = False
    
    # 2. V√©rification des services backend
    print("\n‚öôÔ∏è 2. SERVICES BACKEND")
    service_file = base_path / "src/backend/services/shopping_service.py"
    if check_file_exists(service_file, "Service ShoppingService"):
        # V√©rifier les m√©thodes cl√©s
        methods_to_check = [
            "generate_optimized_shopping_list",
            "update_item_status",
            "get_shopping_list_statistics",
            "export_shopping_list_data",
            "_group_by_store_categories",
            "_apply_unit_conversion"
        ]
        
        if not check_file_contains(service_file, methods_to_check, "M√©thodes du ShoppingService"):
            all_checks_passed = False
    else:
        all_checks_passed = False
    
    # 3. V√©rification des sch√©mas
    print("\nüìã 3. SCH√âMAS MARSHMALLOW")
    schema_file = base_path / "src/backend/schemas/meal_plan.py"
    if check_file_exists(schema_file, "Sch√©mas Marshmallow"):
        schemas_to_check = [
            "OptimizedShoppingListSchema",
            "ItemToggleSchema",
            "BulkToggleSchema",
            "ShoppingListExportSchema",
            "ShoppingListStatisticsSchema"
        ]
        
        if not check_file_contains(schema_file, schemas_to_check, "Nouveaux sch√©mas US1.5"):
            all_checks_passed = False
    else:
        all_checks_passed = False
    
    # 4. V√©rification des routes API
    print("\nüõ£Ô∏è 4. ROUTES API")
    routes_file = base_path / "src/backend/routes/meal_plans.py"
    if check_file_exists(routes_file, "Routes API"):
        endpoints_to_check = [
            "toggle_shopping_item",
            "bulk_toggle_items",
            "get_shopping_list_statistics",
            "prepare_shopping_list_export",
            "get_shopping_list_history"
        ]
        
        if not check_file_contains(routes_file, endpoints_to_check, "Nouveaux endpoints US1.5"):
            all_checks_passed = False
    else:
        all_checks_passed = False
    
    # 5. V√©rification des migrations
    print("\nüóÑÔ∏è 5. MIGRATIONS BASE DE DONN√âES")
    migration_file = base_path / "src/backend/database/migrations/versions/003_add_shopping_list_enhancements.py"
    if check_file_exists(migration_file, "Migration US1.5"):
        migration_elements = [
            "shopping_list_history",
            "store_categories",
            "checked_items_json",
            "aggregation_rules_json"
        ]
        
        if not check_file_contains(migration_file, migration_elements, "√âl√©ments de migration"):
            all_checks_passed = False
    else:
        all_checks_passed = False
    
    # 6. V√©rification des hooks React
    print("\n‚öõÔ∏è 6. HOOKS REACT")
    hook_file = base_path / "src/frontend/hooks/useShoppingList.js"
    if check_file_exists(hook_file, "Hook useShoppingList"):
        hook_functions = [
            "toggleItemStatus",
            "bulkToggleItems",
            "getListStatistics",
            "exportList",
            "getListHistory",
            "useNetworkStatus"
        ]
        
        if not check_file_contains(hook_file, hook_functions, "Fonctions du hook US1.5"):
            all_checks_passed = False
    else:
        all_checks_passed = False
    
    # 7. V√©rification du composant Shopping
    print("\nüñ•Ô∏è 7. COMPOSANT SHOPPING")
    component_file = base_path / "src/frontend/components/Shopping.jsx"
    if check_file_exists(component_file, "Composant Shopping"):
        component_features = [
            "showStatsModal",
            "showHistoryModal",
            "handleShowStatistics",
            "handleShowHistory",
            "handleExport",
            "BarChart3",
            "History"
        ]
        
        if not check_file_contains(component_file, component_features, "Fonctionnalit√©s US1.5 du composant"):
            all_checks_passed = False
    else:
        all_checks_passed = False
    
    # 8. V√©rification des tests
    print("\nüß™ 8. TESTS UNITAIRES")
    test_checks = [
        (base_path / "tests/backend/test_shopping_service_us15.py", "Tests service backend"),
        (base_path / "tests/backend/test_shopping_api_us15.py", "Tests API backend"),
        (base_path / "tests/frontend/shopping-us15.test.jsx", "Tests composant React"),
    ]
    
    for file_path, description in test_checks:
        if not check_file_exists(file_path, description):
            all_checks_passed = False
    
    # 9. V√©rification des scripts d'int√©gration
    print("\nüîß 9. SCRIPTS D'INT√âGRATION")
    script_checks = [
        (base_path / "scripts/test_us15_integration.py", "Script de test d'int√©gration"),
        (base_path / "scripts/check_us15_implementation.py", "Script de v√©rification (actuel)"),
    ]
    
    for file_path, description in script_checks:
        if not check_file_exists(file_path, description):
            all_checks_passed = False
    
    # 10. V√©rification de la configuration
    print("\n‚öôÔ∏è 10. CONFIGURATION")
    config_checks = [
        (base_path / "src/backend/main.py", "Configuration principale"),
        (base_path / "package.json", "Configuration npm"),
        (base_path / "requirements.txt", "D√©pendances Python"),
    ]
    
    for file_path, description in config_checks:
        if not check_file_exists(file_path, description):
            all_checks_passed = False
    
    # V√©rifier que main.py importe les nouveaux mod√®les
    main_py = base_path / "src/backend/main.py"
    if main_py.exists():
        import_terms = [
            "ShoppingListHistory",
            "StoreCategory"
        ]
        if not check_file_contains(main_py, import_terms, "Imports des nouveaux mod√®les"):
            all_checks_passed = False
    
    # 11. R√©sum√© final
    print("\n" + "=" * 80)
    if all_checks_passed:
        print("üéâ SUCC√àS: Tous les composants US1.5 sont en place !")
        print("‚ú® L'impl√©mentation semble compl√®te et pr√™te pour les tests")
        print("\nüìã PROCHAINES √âTAPES:")
        print("   1. Ex√©cuter les migrations de base de donn√©es")
        print("   2. D√©marrer le serveur Flask")
        print("   3. Lancer le script de test d'int√©gration")
        print("   4. Tester l'interface utilisateur")
    else:
        print("‚ö†Ô∏è ATTENTION: Certains composants sont manquants ou incomplets")
        print("üîß Veuillez corriger les probl√®mes avant de continuer")
    
    print("\nüí° COMMANDES UTILES:")
    print("   ‚Ä¢ Tests backend: python -m pytest tests/backend/test_shopping_*")
    print("   ‚Ä¢ Tests frontend: npm test shopping-us15")
    print("   ‚Ä¢ Test d'int√©gration: python scripts/test_us15_integration.py")
    
    return all_checks_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)